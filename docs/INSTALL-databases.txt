================================
 Configuring baseline databases
================================

If you stumble upon a bug or an unclear section in the instructions,
please file a ticket on the GitHub project or send a pull request with
the patch.

   NOTE: If you configured the database before the httpfuzzer
   functionality was released to Open Source, and want to reuse your
   data from past test runs, you need to:
      1) Manually rename headless_burp_issues table:
         ALTER TABLE headless_burp_issues RENAME TO headlessscanner_issues;
      2) Remove the httpfuzzer_issues table and re-create it:
         DROP TABLE httpfuzzer_issues;
         Read this document for details on (re-)creating the table.
    If this is the first time you are using Mittn, this does not affect you.


What are baseline databases?
============================

The tests in Mittn have a tendency of finding false positives. Also,
due to the distributed nature of cloud-based Continuous Integration
systems, the tests might be running on transient nodes that are
deployed just for the duration of a test run and then shut down. The
baseline database holds the information on new findings and known
false positives in a central place.

Currently, the httpfuzzer and headless-scanner tools use baseline
databases. The headless-scanner tool requires a database; the httpfuzzer
can be run without one, but the usefulness is greatly reduced.

If you need a centralised database that receives issues from a number
of nodes, you need a PostgreSQL database that allows TLS (SSL)
connections. If you only need a local database, you can use PostgreSQL
or a file-based sqlite3 database. The latter is much easier to set up
as it requires no database server or users to be defined.

Whichever database you use, you will provide the configuration options
in features/environment.py.

Selecting the appropriate database
==================================

The test system uses an SQL database to store false positives, so that
it doesn't report them as errors. Whenever new positives are
encountered, those are added to the database. The developers can then
check the finding. If the finding is a false positive, they will need
to mark it as such in the database (by setting a flag new_issue as
zero on that finding). If it was a real positive, that finding needs
to be removed from the database (and of course, the system under test
needs a fix).

The system supports either databases in local files with sqlite, or a
connection over the network to an off-host PostgreSQL database. Select
the database solution you want to use:

  1. If you run the tests on a developer machine, or on a host that is
     not redeployed from scratch every time (i.e., the host has
     persistent storage), or if the host has a persistent
     network-mounted file system, it is probably easier to store the
     results into a file-based sqlite database.

  2. If you run tests concurrently on several nodes against the same
     system under test, or if your test system is on a VM instance
     that is destroyed after the tests (i.e., the host has no
     persistent storage), or if you want to share the results easily
     with a larger team, it is probably easier to use PostgreSQL.

There are two setup scripts in the Mittn/data directory. These will
set up the database and user for you.

PostgreSQL database setup:
--------------------------

  1. Install and configure the PostgreSQL server. You need to enable
     connections over TLS (SSL). copy
     Mittn/features/environment.py.template into environment.py and
     insert the correct host and port information.

  2. Decide on the database user (default: mittn) and password. Edit
     these in Mittn/data/create-baseline-database.psql on the CREATE
     USER and ALTER USER lines. Edit Mittn/features/environment.py to
     reflect the username.

  3. As the database administrator (typically postgres), run

     $ psql -d template1 < create-baseline-database.psql

  4. The script should run without errors. Check that the database has
     been correctly created.

When running the tests, the password of the database user will be
retrieved from an environment variable. This allows it to be provided
to the script without storing it in a file. By default, the
environment variable is PGPASSWORD, but you can change this in
Mittn/features/environment.py.

Note that the test script will always try to connect to the PostgreSQL
server over TLS (SSL). It does not check certificates, though, so the
connections are vulnerable to active Man-in-the-Middle attacks. This
setup is not intended to be exposed to untrusted networks. Ensure that
your PostgreSQL server can only be connected to from authorised nodes.

sqlite3 database setup:
-----------------------

  1. Install sqlite3.

  2. Decide where your database will reside in your file system. Edit
     Mittn/features/environment.py to reflect this location.

  3. As the user who will be running Mittn, run

     $ sqlite3 /path/to/baseline.sqlite < create-baseline-database.sqlite3

     (In this example, the database name is "baseline.sqlite")

  4. The script should run without errors. Check that the database has
     been correctly created.

