"""This file contains the code that runs positive test scenarios.
Scenarios are identified by scenario ID, which is provided in the
Gherkin .feature file. The code in this file should generate HTTP
requests that are directed to a proxy, which you also defined in
the Gherkin .feature file.

If your valid test cases fail, you should assert False with a
descriptive message. This is because if your valid cases fail,
security testing has little chance of working either.

"""

import requests
import logging
from mittn.headlessburp.burp_comms import *


def run_scenario(scenario_id, proxy_address, burp_process):
    # Set the proxies. How you need to do this depends on the libraries
    # you use for driving test scenarios; the following is for the 'requests'
    # library. The proxy_address contains the proxy as "host:port" (without
    # the URI scheme).
    proxydict = {'http': 'http://' + proxy_address,
                 'https': 'https://' + proxy_address}

    # Here we will do whatever valid cases we want, indexed by
    # scenario id. This is just an example doing a simple request.
    # It is a good idea to set sensible timeouts and assert False if
    # a timeout is reached. If the target system doesn't respond
    # (or Burp Suite is somehow screwed) you want the test case to fail.
    if scenario_id == "1":
        logging.getLogger("requests").setLevel(logging.WARNING)
        try:
            r = requests.get("https://mittn.org",
                             proxies=proxydict,
                             timeout=5,
                             verify=False)
        except requests.exceptions.RequestException as e:
            # This is an example of an exception caught in your test scenario.
            # Kill the Burp Suite process before exiting.
            kill_subprocess(burp_process)
            assert False, "Scenario id %s valid test case failed: %s" % (scenario_id, e)
        # The following checks whether our simple example test was successful
        # (i.e., not a 4xx or 5xx series return code).
        if r.status_code > 399:
            assert False, "Scenario id %s valid test case failed with HTTP status code %s" % (scenario_id, r.status_code)
        return

    if scenario_id == "2":
        # Just an example of where you would put another test scenario with
        # another id.
        return
    assert False, "Scenario id %s has no test implementation" % scenario_id
