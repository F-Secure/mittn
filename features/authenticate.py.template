# coding=utf-8

from requests import auth
import os


def authenticate(context, auth_flow_id=None, acquire_new_authenticator=False):
    """Authenticate to the target server with a specified
    authentication method.  Return a Requests auth object.

    :param acquire_new_authenticator: If True, authentication will be
    re-triggered. If False, old cached authenticator will be reused.
    :param auth_flow_id: An arbitrary identifier provided in the
    Gherkin file that selects one of the potential authentication
    flows, if the tests need different ones.
    """

    #### 
    # This is the place which you need to modify if your target
    # requires authorisation. (If you don't, you can just copy this
    # template as features/authenticate.py and you should be set.)
    #
    # You need to return a Requests library authenticator
    # object. Please read
    # http://docs.python-requests.org/en/latest/user/authentication/
    #
    # The thing you need to return is what is passed as the auth
    # parameter in the examples in the above documentation.  There are
    # some things you may want to do here.
    #
    # 1. If you have different
    # authentication flows (e.g., for different test cases), the
    # variable auth_flow_id contains an arbitrary identifier that is
    # defined in the Gherkin .feature file. You can return different
    # authenticators based on this variable. If you only have one type
    # of authorisation, you do not need to consider this.
    #
    # 2. If the
    # acquire_new_authenticator is True, you should
    # re-authenticate/authorise yourself (e.g., if you authorisation
    # is a session cookie, you need to re-obtain a new session
    # cookie). Unless you do this, your test run probably stops there.
    # A skeleton that does this is already provided below.
    #
    # By
    # default, we return a CustomAuth() object that does nothing. This
    # is equal to not having any auth. If you have a complex auth
    # scheme, e.g., you need to log into a system using a Selenium
    # script, the CustomAuth's __call__ below is the right place to
    # implement it. If you use the auth methods Requests provides, do
    # not return the CustomAuth object - instead, return one of the
    # Requests library built-in authentication objects (see the doc
    # link above).  
    ###

    # Reuse an existing authenticator unless explicitly requested to
    # create a new one, or if this is the first time we need one
    if hasattr(context, "cached_authenticator") is False or acquire_new_authenticator is True:
        # The following is what you may want to change
        context.cached_authenticator = CustomAuth()  # Here you should assign your auth object
        context.cached_authenticator.reset_authenticator()  # Comment this line out if not using CustomAuth

        # As an example, if you need HTTP Basic Authentication,
        # comment out the two lines above and instead use the
        # following: context.cached_authenticator =
        # auth.HTTPBasicAuth('user', 'pass')
    return context.cached_authenticator


class CustomAuth(auth.AuthBase):
    def __call__(self, request):
        """A template for implementing your very own custom authentication.
        Here you are supposed to modify the HTTP request so it's authenticated.

        :param request: A Requests request to be modified and returned
        """

        ####
        # If you need a more complex authentication / authorisation
        # system that what is supported by Requests out of the box,
        # implement it here. You should modify the request parameter
        # and return it.
        #
        # See
        # http://docs.python-requests.org/en/latest/user/authentication/#new-forms-of-authentication
        #
        # If your system does not require authentication, you can
        # leave this as is.
        ####

        if hasattr(self, 'cached_session') is False or self.cached_session is None:

            # Here, perform any auth steps necessary. Store your token or other
            # authentication result in self.cached_session.

            # Example:
            # self.cached_session = your_session_token
            pass

        # Here, modify the request using self.cached_session.

        # Example:
        # request.headers['X-Session'] = self.cached_session

        return request

    def reset_authenticator(self):
        """A convenience function to request a new authentication to take place
        """
        self.cached_session = None
